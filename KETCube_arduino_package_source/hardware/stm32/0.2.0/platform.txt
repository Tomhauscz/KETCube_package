name=KETCube (ARM 32-bit) boards
version=0.2.0

# ================ Compile variables ===============

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-x c -std=gnu99 -c -Wall -Wno-missing-braces -g -mthumb -mcpu={build.mcu} -Os -march={build.march} -m{build.endianness} "-T{build.variant.path}/{build.ldscript}" -g3 -DSTM32L082xx -DUSE_B_L082Z_KETCube -DUSE_HAL_DRIVER -DREGION_EU868
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.c.elf.flags=-mcpu=cortex-m0 -march=armv6-m "-T{build.variant.path}/{build.ldscript}" -Wl,-Map={build.path}/{build.project_name}.map,--gc-sections -mthumb -mfloat-abi=soft -specs=nano.specs -specs=nosys.specs -lc -lrdimon -u _printf_float

compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-x c -std=gnu99 -c -Wall -Wno-missing-braces -g -mthumb -mcpu={build.mcu} -Os -march={build.march} -m{build.endianness} "-T{build.variant.path}/{build.ldscript}" -g3 -DSTM32L082xx -DUSE_B_L082Z_KETCube -DUSE_HAL_DRIVER -DREGION_EU868
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs
compiler.size.cmd=arm-none-eabi-size


compiler.elf2hex.bin.flags=-O binary
compiler.elf2hex.hex.flags=-O ihex
compiler.elf2hex.cmd=arm-none-eabi-objcopy

# this can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# ================= Compile patterns ===============

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {compiler.c.extra_flags} {build.variant_system_include} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {compiler.c.extra_flags} {build.variant_system_include} {includes} "{source_file}" -o "{object_file}"


## Create archives
# archive_file_path is needed for backwards compatibility with IDE 1.6.5 or older, IDE 1.6.6 or newer overrides this value
archive_file_path={build.variant.path}/{build.archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" "-L{build.path}" "-L{build.variant.path}/{build.libdir}" {object_files} -Wl,--whole-archive -lKETCube -Wl,--no-whole-archive {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {build.extra_flags} -o "{build.path}/{build.project_name}.elf"

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.bin.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"
recipe.output.tmp_file={build.project_name}.{build.preferred_out_format}
recipe.output.save_file={build.project_name}.{build.variant}.{build.preferred_out_format}

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

build.preferred_out_format=bin

## Save output
recipe.output.tmp_file={build.project_name}.{build.preferred_out_format}
recipe.output.save_file={build.project_name}.{build.variant}.{build.preferred_out_format}

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

# Uploader tools
# --------------

# ======== STM32FLASH ========

tools.stm32flash.cmd=stm32flash
tools.stm32flash.cmd.windows=stm32flash.exe
tools.stm32flash.path={runtime.platform.path}/tools/linux
tools.stm32flash.path.windows={runtime.platform.path}/tools/win
tools.stm32flash.path.macosx={runtime.platform.path}/tools/macosx
tools.stm32flash.port={serial.port.file}
tools.stm32flash.port.linux=/dev/{serial.port.file}
tools.stm32flash.port.macosx=/dev/{serial.port.file}
tools.stm32flash.upload.params.verbose=
tools.stm32flash.upload.params.quiet=
tools.stm32flash.upload.pattern={path}/{cmd} -e 1535 -w {build.path}/{build.project_name}.bin {upload.options} {port}

